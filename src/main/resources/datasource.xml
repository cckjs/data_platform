<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd   
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd ">
	<!-- 加载mvc标签,是mvc标签可以生效 -->

	<context:annotation-config />
	<!-- 扫描controller所在的包 -->
	<context:component-scan base-package="com.yy.data.platform" />
	<bean id="dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${id_dataSource_1.driverClassName}" />
		<property name="jdbcUrl" value="${id_dataSource_1.url}" />
		<property name="user" value="${id_dataSource_1.username}" />
		<property name="password" value="${id_dataSource_1.password}" />
		<property name="initialPoolSize">
			<value>100</value>
		</property>
		<property name="minPoolSize">
			<value>50</value>
		</property>
		<property name="maxPoolSize">
			<value>500</value>
		</property>
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>50</value>
		</property>
		<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>0</value>
		</property>
		<!-- 每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>
		<!-- 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>

	<bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${id_dataSource_2.driverClassName}" />
		<property name="jdbcUrl" value="${id_dataSource_2.url}" />
		<property name="user" value="${id_dataSource_2.username}" />
		<property name="password" value="${id_dataSource_2.password}" />
		<property name="initialPoolSize">
			<value>100</value>
		</property>
		<property name="minPoolSize">
			<value>50</value>
		</property>
		<property name="maxPoolSize">
			<value>500</value>
		</property>
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>50</value>
		</property>
		<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>0</value>
		</property>
		<!-- 每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>
		<!-- 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>

	<bean id="routeDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${route.driverClassName}" />
		<property name="jdbcUrl" value="${route.url}" />
		<property name="user" value="${route.username}" />
		<property name="password" value="${route.password}" />
		<property name="initialPoolSize">
			<value>100</value>
		</property>
		<property name="minPoolSize">
			<value>50</value>
		</property>
		<property name="maxPoolSize">
			<value>500</value>
		</property>
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>50</value>
		</property>
		<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>0</value>
		</property>
		<!-- 每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>
		<!-- 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>

	<bean id="IDDataSource1" class="com.yy.data.platform.tool.id.datasource.IDDataSource">
		<property name="dsName" value="sequence_ds_1"></property>
		<property name="dataSource" ref="dataSource1"></property>
	</bean>

	<bean id="IDDataSource2" class="com.yy.data.platform.tool.id.datasource.IDDataSource">
		<property name="dsName" value="sequence_ds_2"></property>
		<property name="dataSource" ref="dataSource2"></property>
	</bean>

	<bean id="IDDataSourcePool" class="com.yy.data.platform.tool.id.datasource.IDDataSourcePool">
		<property name="dsNum" value="2"></property>
		<property name="dsPool">
			<map>
				<entry key="1" value-ref="IDDataSource1" />
				<entry key="2" value-ref="IDDataSource2" />
			</map>
		</property>
	</bean>

	<bean id="BaseIdGenerator" class="com.yy.data.platform.tool.id.BaseIdGenerator">
		<property name="dsPool" ref="IDDataSourcePool"></property>
	</bean>
	<bean id="IDFactory" class="com.yy.data.platform.tool.id.IDFactory" parent="BaseIdGenerator" />

	<bean id="BaseRelication" class="com.yy.data.platform.tool.replication.BaseRelication">
		<property name="routeDataSource" ref="routeDataSource"></property>
	</bean>

	<bean id="ExtendRelication" class="com.yy.data.platform.tool.replication.ExtendRelication"
		parent="BaseRelication"></bean>
</beans>